package com.algaworks.algafood.core.springfox;

import java.io.File;
import java.io.InputStream;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Arrays;
import java.util.List;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.Resource;
import org.springframework.data.domain.Pageable;
import org.springframework.hateoas.CollectionModel;
import org.springframework.hateoas.Links;
import org.springframework.hateoas.PagedModel;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.ServletWebRequest;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import com.algaworks.algafood.api.exceptionhandler.Problem;
import com.algaworks.algafood.api.v1.model.CidadeModel;
import com.algaworks.algafood.api.v1.model.CozinhaModel;
import com.algaworks.algafood.api.v1.model.EstadoModel;
import com.algaworks.algafood.api.v1.model.FormaPagamentoModel;
import com.algaworks.algafood.api.v1.model.GrupoModel;
import com.algaworks.algafood.api.v1.model.PedidoResumoModel;
import com.algaworks.algafood.api.v1.model.PermissaoModel;
import com.algaworks.algafood.api.v1.model.ProdutoModel;
import com.algaworks.algafood.api.v1.model.RestauranteModel;
import com.algaworks.algafood.api.v1.model.UsuarioModel;
import com.algaworks.algafood.api.v1.openapi.model.CidadesModelOpenApi;
import com.algaworks.algafood.api.v1.openapi.model.CozinhasModelOpenApi;
import com.algaworks.algafood.api.v1.openapi.model.EstadosModelOpenApi;
import com.algaworks.algafood.api.v1.openapi.model.FormasPagamentoModelOpenApi;
import com.algaworks.algafood.api.v1.openapi.model.GruposModelOpenApi;
import com.algaworks.algafood.api.v1.openapi.model.LinksModelOpenApi;
import com.algaworks.algafood.api.v1.openapi.model.PageableModelOpenApi;
import com.algaworks.algafood.api.v1.openapi.model.PedidosModelOpenApi;
import com.algaworks.algafood.api.v1.openapi.model.PermissoesModelOpenApi;
import com.algaworks.algafood.api.v1.openapi.model.ProdutosModelOpenApi;
import com.algaworks.algafood.api.v1.openapi.model.RestaurantesModelOpenApi;
import com.algaworks.algafood.api.v1.openapi.model.UsuariosModelOpenApi;
import com.algaworks.algafood.api.v2.model.CidadeModelV2;
import com.algaworks.algafood.api.v2.model.CozinhaModelV2;
import com.algaworks.algafood.api.v2.openapi.model.CidadesModelOpenApiV2;
import com.algaworks.algafood.api.v2.openapi.model.CozinhasModelOpenApiV2;
import com.fasterxml.classmate.TypeResolver;

import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.OAuthBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.builders.ResponseMessageBuilder;
import springfox.documentation.schema.AlternateTypeRules;
import springfox.documentation.schema.ModelRef;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.AuthorizationScope;
import springfox.documentation.service.Contact;
import springfox.documentation.service.GrantType;
import springfox.documentation.service.ResourceOwnerPasswordCredentialsGrant;
import springfox.documentation.service.ResponseMessage;
import springfox.documentation.service.SecurityReference;
import springfox.documentation.service.SecurityScheme;
import springfox.documentation.service.Tag;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spi.service.contexts.SecurityContext;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
public class SpringFoxConfig implements WebMvcConfigurer {
		
	@Bean
	public Docket apiDocketV1() {
		TypeResolver typeResolver = new TypeResolver();
		
		return new Docket(DocumentationType.SWAGGER_2)
				.groupName("V1")
				.securitySchemes(Arrays.asList(securityScheme()))
				.securityContexts(Arrays.asList(securityContext()))
				
				.select()
					.apis(RequestHandlerSelectors.basePackage("com.algaworks.algafood.api"))
					.paths(PathSelectors.ant("/v1/**"))
					.build()
					.useDefaultResponseMessages(false)
					.globalResponseMessage(RequestMethod.GET, globalGetResponseMessage())
					.globalResponseMessage(RequestMethod.POST, globalPostResponseMessage())
					.globalResponseMessage(RequestMethod.PUT, globalPutResponseMessage())
					.globalResponseMessage(RequestMethod.DELETE, globalDeleteResponseMessage())
					.additionalModels(typeResolver.resolve(Problem.class))
					.ignoredParameterTypes(ServletWebRequest.class, URI.class, URL.class,
							URLStreamHandler.class, Resource.class, File.class, InputStream.class)
					.directModelSubstitute(Pageable.class, PageableModelOpenApi.class)
					.directModelSubstitute(Links.class, LinksModelOpenApi.class)
					.alternateTypeRules(AlternateTypeRules.newRule(
							typeResolver.resolve(PagedModel.class, CozinhaModel.class), 
							CozinhasModelOpenApi.class))
					.alternateTypeRules(AlternateTypeRules.newRule(
							typeResolver.resolve(PagedModel.class, PedidoResumoModel.class), 
							PedidosModelOpenApi.class))
					.alternateTypeRules(AlternateTypeRules.newRule(
							typeResolver.resolve(CollectionModel.class, CidadeModel.class), 
							CidadesModelOpenApi.class))
					.alternateTypeRules(AlternateTypeRules.newRule(
							typeResolver.resolve(CollectionModel.class, EstadoModel.class), 
							EstadosModelOpenApi.class))
					.alternateTypeRules(AlternateTypeRules.newRule(
							typeResolver.resolve(CollectionModel.class, FormaPagamentoModel.class), 
							FormasPagamentoModelOpenApi.class))
					.alternateTypeRules(AlternateTypeRules.newRule(
							typeResolver.resolve(CollectionModel.class, GrupoModel.class), 
							GruposModelOpenApi.class))
					.alternateTypeRules(AlternateTypeRules.newRule(
							typeResolver.resolve(CollectionModel.class, PermissaoModel.class), 
							PermissoesModelOpenApi.class))
					.alternateTypeRules(AlternateTypeRules.newRule(
							typeResolver.resolve(CollectionModel.class, ProdutoModel.class), 
							ProdutosModelOpenApi.class))
					.alternateTypeRules(AlternateTypeRules.newRule(
						    typeResolver.resolve(CollectionModel.class, RestauranteModel.class),
						    RestaurantesModelOpenApi.class))
						.alternateTypeRules(AlternateTypeRules.newRule(
						        typeResolver.resolve(CollectionModel.class, UsuarioModel.class),
						        UsuariosModelOpenApi.class))
					.apiInfo(apiInfoV1())
					.tags(  new Tag("Cidades", "Gerencia as cidades"), 
							new Tag("Grupos", "Gerencia os Grupos"),
							new Tag("Cozinhas", "Gerencia as Cozinhas"),
							new Tag("Formas de Pagamento", "Gerencia as Formas de Pagamento"),
							new Tag("Pedidos", "Gerencia os Pedidos"),
							new Tag("Restaurantes", "Gerencia os Restaurantes"),
							new Tag("Estados", "Gerencia os Estados"),
							new Tag("Produtos", "Gerencia os Produtos"),
							new Tag("Grupos", "Gerencia os Grupos"),
							new Tag("Usuarios", "Gerencia os Usuários"),
							new Tag("Estatísticas", "Gerencia as Estatísticas"));
	}
	
	@Bean
	public Docket apiDocketV2() {
		TypeResolver typeResolver = new TypeResolver();
		
		return new Docket(DocumentationType.SWAGGER_2)
				.groupName("V2")
				.select()
					.apis(RequestHandlerSelectors.basePackage("com.algaworks.algafood.api"))
					.paths(PathSelectors.ant("/v2/**"))
					.build()
					.useDefaultResponseMessages(false)
					.globalResponseMessage(RequestMethod.GET, globalGetResponseMessage())
					.globalResponseMessage(RequestMethod.POST, globalPostResponseMessage())
					.globalResponseMessage(RequestMethod.PUT, globalPutResponseMessage())
					.globalResponseMessage(RequestMethod.DELETE, globalDeleteResponseMessage())
					.additionalModels(typeResolver.resolve(Problem.class))
					.ignoredParameterTypes(ServletWebRequest.class, URI.class, URL.class,
							URLStreamHandler.class, Resource.class, File.class, InputStream.class)
					.directModelSubstitute(Pageable.class, PageableModelOpenApi.class)
					.directModelSubstitute(Links.class, LinksModelOpenApi.class)
					.alternateTypeRules(AlternateTypeRules.newRule(
							typeResolver.resolve(PagedModel.class, CozinhaModelV2.class), 
							CozinhasModelOpenApiV2.class))
					.alternateTypeRules(AlternateTypeRules.newRule(
							typeResolver.resolve(CollectionModel.class, CidadeModelV2.class), 
							CidadesModelOpenApiV2.class))
					.apiInfo(apiInfoV2())
					.tags(  new Tag("Cidades", "Gerencia as cidades"), 
							new Tag("Cozinhas", "Gerencia as Cozinhas"),
							new Tag("Root Entrypoint", "Ponto de entrada da Api"));
	}
	
	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
		registry.addResourceHandler("swagger-ui.html")
			.addResourceLocations("classpath:/META-INF/resources/");
		
		registry.addResourceHandler("/webjars/**")
		.addResourceLocations("classpath:/META-INF/resources/webjars/");
	}
	
	public ApiInfo apiInfoV1() {
		return new ApiInfoBuilder()
				.title("Algafood API")
				.description("API aberta para clientes e restaurantes.")
				.version("1.0")
				.contact(new Contact("Algaworks", "http://www.algaworks.com.br", "suporte-algaworks@algaworks.com"))
				.build();
	}
	
	public ApiInfo apiInfoV2() {
		return new ApiInfoBuilder()
				.title("Algafood API")
				.description("API aberta para clientes e restaurantes.")
				.version("2.0")
				.contact(new Contact("Algaworks", "http://www.algaworks.com.br", "suporte-algaworks@algaworks.com"))
				.build();
	}
	
	private SecurityScheme  securityScheme() {
		return new OAuthBuilder()
				.name("Algafood")
				.grantTypes(grantTypes())
				.scopes(scopes())
				.build();
	}
	
	private SecurityContext securityContext() {
		var securityReference = SecurityReference.builder()
				.reference("Algafood") //tem que ser o mesmo nome do securityScheme
				.scopes(scopes().toArray(new AuthorizationScope[0]))
				.build();
		
		return SecurityContext.builder()
				.securityReferences(Arrays.asList(securityReference))
				.forPaths(PathSelectors.any())
				.build();
	}
	
	private List<AuthorizationScope> scopes() {
		return Arrays.asList(new AuthorizationScope("READ", "Accesso de Leitura"), 
				new AuthorizationScope("WRITE", "Accesso de Escrita"));
	}

	private List<GrantType> grantTypes() {
		return Arrays.asList(new ResourceOwnerPasswordCredentialsGrant("/oauth/token"));
	}

	private List<ResponseMessage> globalGetResponseMessage() {
		return Arrays.asList(
				new ResponseMessageBuilder()
					.code(HttpStatus.INTERNAL_SERVER_ERROR.value())
					.message("Erro interno do servidor")
					.responseModel(new ModelRef("Problema"))
					.build(),
				new ResponseMessageBuilder()
					.code(HttpStatus.NOT_ACCEPTABLE.value())
					.message("Recurso não possui representação que poderia ser aceita pelo consumidor")
					.build()
				);
	}
	
	private List<ResponseMessage> globalPostResponseMessage() {
		return Arrays.asList(
				new ResponseMessageBuilder()
					.code(HttpStatus.INTERNAL_SERVER_ERROR.value())
					.message("Erro interno do servidor")
					.responseModel(new ModelRef("Problema"))
					.build(),
				new ResponseMessageBuilder()
					.code(HttpStatus.NOT_ACCEPTABLE.value())
					.message("Recurso não possui representação que poderia ser aceita pelo consumidor")
					.build(),
				new ResponseMessageBuilder()
					.code(HttpStatus.UNSUPPORTED_MEDIA_TYPE.value())
					.message("Media Type não suportada")
					.build(),
				new ResponseMessageBuilder()
					.code(HttpStatus.BAD_REQUEST.value())
					.message("Falha no modelo de entrada.")
					.responseModel(new ModelRef("Problema"))
					.build()
				);
	}
	
	private List<ResponseMessage> globalPutResponseMessage() {
		return Arrays.asList(
				new ResponseMessageBuilder()
					.code(HttpStatus.INTERNAL_SERVER_ERROR.value())
					.message("Erro interno do servidor")
					.responseModel(new ModelRef("Problema"))
					.build(),
				new ResponseMessageBuilder()
					.code(HttpStatus.NOT_ACCEPTABLE.value())
					.message("Recurso não possui representação que poderia ser aceita pelo consumidor")
					.build(),
				new ResponseMessageBuilder()
					.code(HttpStatus.UNSUPPORTED_MEDIA_TYPE.value())
					.message("Media Type não suportada")
					.build(),
				new ResponseMessageBuilder()
					.code(HttpStatus.BAD_REQUEST.value())
					.message("Falha no modelo de entrada.")
					.responseModel(new ModelRef("Problema"))
					.build()
				);
	}
	
	private List<ResponseMessage> globalDeleteResponseMessage() {
		return Arrays.asList(
				new ResponseMessageBuilder()
					.code(HttpStatus.INTERNAL_SERVER_ERROR.value())
					.message("Erro interno do servidor")
					.responseModel(new ModelRef("Problema"))
					.build(),
				new ResponseMessageBuilder()
					.code(HttpStatus.BAD_REQUEST.value())
					.message("Falha no modelo de entrada.")
					.responseModel(new ModelRef("Problema"))
					.build()
				);
	}
}
